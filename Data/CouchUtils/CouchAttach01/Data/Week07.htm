<h1 id="week07">Week07</h1>
<p>The assignment for Week 7 is <a href="http://www.elvenware.com/charlie/books/CloudNotes/Prog282/Week07-Assignment.html">here</a></p>
<h1 id="main-topics">Main Topics</h1>
<ul>
<li>Databases - CouchDb</li>
<li>VirtualBox</li>
<li>Two Grids (Background and NPCs - GridCanvas04</li>
<li>Finding an NPC</li>
</ul>
<p>Key Demos:</p>
<p>There are mostly in JsObjects. Look especially at:</p>
<ul>
<li>CouchDb08: This one is crucial.</li>
<li>CouchApp06: Look in the _attachments directory</li>
<li>CouchDb03: Using the <strong>request</strong> library</li>
<li>CouchDb04: Using the <strong>nano</strong> library</li>
<li>CouchDb05: This is a <strong>hello world</strong> of sorts for couchdb</li>
</ul>
<h2 id="databases">Databases</h2>
<p>We are going to be working mostly with NoSQL database. Relational databases are great, of course, but you have seen them in other courses. An important part of the cloud ecology is built around NoSQL databases.</p>
<ul>
<li><a href="http://nosql-database.org/">http://nosql-database.org/</a></li>
<li><a href="https://en.wikipedia.org/wiki/NoSQL">https://en.wikipedia.org/wiki/NoSQL</a></li>
</ul>
<p>NoSQL databases are:</p>
<ul>
<li>non-relational.</li>
<li>distributed</li>
<li>able to handle huge amounts of data (big data)</li>
</ul>
<p>An example of Big Data is the Large Hadron Collider, which stores 10 PetaBytes of data per year in CouchDb. Twitter uses both MySQL and NoSQL. They brought in a NoSQL solution based on Hadoop because their users generate about 4 PetaBytes of data year. Their solution uses Pig, Hbase and FlockDb, all of which run on top of Hadoop.</p>
<p>NoSql databases are designed to let you:</p>
<ul>
<li>Write huge amounts of data to them very quickly</li>
<li>Provide fast key-value pair lookups</li>
<li>Have no single point of failure</li>
<li>Support for distrubted parallel computing</li>
<li>Good support for analytical queries that do something like the SQL commands to SELECT data, then GROUP BY some term. In the SQL world, this is called Map Reduce.</li>
<li>Support for rapid development with a flexible structure. If you have highly structured data, then SQL is probably a better choice. But if you want some flexibility, then NoSQL can be helpful.</li>
</ul>
<p>There are many good NoSQL databases, including MongoDb, Cassandra, Hadoop/Hbase, and CouchDb. We will focus mostly on CouchDb, though I would like to do at least some work with either MongoDb or Hadoop/Hbase.</p>
<p>Some big or important folks who use NoSQL:</p>
<ul>
<li>Twitter and Hadoop)(http://readwrite.com/2011/01/02/how-twitter-uses-nosql)</li>
<li><a href="http://readwrite.com/2011/01/28/how-netflix-adopted-nosql">Netflix and Cassandra</a></li>
<li><a href="http://readwrite.com/2010/08/26/lhc-couchdb">Large Hadron Collider and CouchDb</a></li>
</ul>
<p>Please don't read this as either:</p>
<ul>
<li>NoSQL is better than relational databases</li>
<li>Relational databases are better than NoSQL</li>
</ul>
<p>Each technology shines in particular settings. Both can scale to huge amounts of data. Both can be very fast in certain settings. There are times when you want to use SQL, and times when you might find a NoSQL database more efficient. It is beyond the scope of this class, and my scope as a teacher, to give you hard and fast rules on these subjects.</p>
<p>For now, our reason for using NoSQL look something like this:</p>
<ul>
<li>We need to be aware of all the important solutions used in the cloud.</li>
<li>NoSQL has broad adoption in the cloud</li>
<li>In some use cases, NoSQL is a better choice than SQL</li>
</ul>
<h2 id="couchdb">CouchDb</h2>
<p>The CouchDb material has moved here:</p>
<p><a href="http://www.elvenware.com/charlie/development/database/NoSql/CouchDb.html">http://www.elvenware.com/charlie/development/database/NoSql/CouchDb.html</a></p>
<h2 id="the-same-origin-policy">The Same Origin Policy</h2>
<p>Let's talk a bit more about jsonp, since this is not a subject we have discussed in depth so far.</p>
<p>After you install CouchDb, you can open up their ﻿<strong>Futon</strong> ﻿web app:</p>
<p><a href="http://localhost:5984/_utils/">http://localhost:5984/_utils/</a></p>
<p>On the upper right hand side of <strong>﻿Futon</strong>﻿ is a link to the configuration page:</p>
<p><a href="http://localhost:5984/_utils/config.html">http://localhost:5984/_utils/config.html</a></p>
<p>About 40 items down in the <strong>﻿options</strong>﻿ column of the configuration page is a setting that allows you to turn on <strong>jsonp</strong>. You should double click the word <strong>﻿false</strong>﻿ and set it to <strong>﻿true</strong>﻿.</p>
<ul>
<li><a href="http://en.wikipedia.org/wiki/Same_origin_policy">http://en.wikipedia.org/wiki/Same_origin_policy</a></li>
<li><a href="http://en.wikipedia.org/wiki/JSONP">http://en.wikipedia.org/wiki/JSONP</a></li>
</ul>
<p>Our browsers are set up to refuse to make requests that are not sent to the web server that served up a particular page. If you are using http://localhost:30025 as your web server, then you can only send requests to http://localhost:30025. If you try, for instance, to post data by making an ajax call to http://www.google.com, then that request will be refused. This is an important security feature. If, for instance, you are connected to your bank, and some hackers intercepts one of your calls (perhaps the one where you submit your password) and tries to direct it to another site, then that request will be refused by the browser because of the Same Origin Policy.</p>
<p><strong>jsonp</strong> is a way around this restriction. As a rule, I think jsonp is a very bad idea. But for now, I want to turn it on.</p>
<p>The last example I showed in class on Wednesday used CouchApp to serve up an application. This is important because it allows us to send couchdb rest commands directly back to the server that served up our pages, without having to use <strong>jsonp</strong>. The technique I showed where we used our server side code in express to make the couchdb calls, also works around the cross domain/same origin policy in a reasonable way. In particular, applications running on a server are not subject to the cross domain policy. So our client can ask the node express server to call couchdb, which is a completely appropriate thing to do. If we don't trust the code running on the server, then we should not be using the service at all!</p>
<p>One way to get around the same origin policy (cross site restriction), is to build a CouchDb hosted application with CouchApp.</p>
<ul>
<li>Get CouchAppAuto from JsObjects/Data.</li>
<li>Change the first editable line (the AppName) in the go batch file.</li>
<li>Run the batch file</li>
<li>Go into the directory it created, which is the same as your AppName</li>
<li>Put your HTML and CSS in the <strong>_attachments</strong> directory. For instance, put a file called index.html there. Then run this command: <strong>couchapp push couchapps</strong>. This command tells CouchApp to push your newly constructed app to the couchdb called couchapp. The go.bat file set up couchapp for you.</li>
<li>Go something like here: http://127.0.0.1:5984/couchapp/_design/CouchApp06/index.html. The key point here is that CouchApp06 should be your AppName, and index.html should be the name of the file you put in the <strong>_attachments</strong> directory.</li>
</ul>
<h2 id="couchapps">CouchApps</h2>
<ul>
<li><a href="http://couchapp.org/page/index">http://couchapp.org/page/index</a></li>
<li><a href="http://couchapp.org/page/getting-started">http://couchapp.org/page/getting-started</a></li>
<li><a href="http://garden20.com/">http://garden20.com/</a></li>
</ul>
<p>To Install CouchApp for use With Node</p>
<p>npm install -g couchapp</p>
<p>To install couchapp without Node:</p>
<ul>
<li><a href="http://sourceforge.net/projects/pywin32/">http://sourceforge.net/projects/pywin32/</a></li>
<li><a href="https://github.com/couchapp/couchapp/downloads">https://github.com/couchapp/couchapp/downloads</a></li>
</ul>
<p>When you are done, make sure couchapp.bat or couchapp.exe is on your path. If you installed via Python (rather than the totally stand alone option), this might mean you do add something like this to your path</p>
<pre><code>c:\Python27\Scripts</code></pre>
<p>It will be the scripts directory that holds you couchapp.bat file.</p>
<h2 id="sqllite">SqlLite</h2>
<p>We probably won't be using SqlLite. If we use relational database this quarter, it will probably be MySQL. But I did some research on SqlLite, and include it here in case you are interested.</p>
<p>When downloading for Windows, look for the <strong>Precompiled Binaries</strong> and look for the command line shell.</p>
<ul>
<li><a href="http://www.sqlite.org/">http://www.sqlite.org/</a></li>
<li><a href="http://www.sqlite.org/download.html">http://www.sqlite.org/download.html</a></li>
<li><a href="http://www.sqlite.org/datatype3.html">http://www.sqlite.org/datatype3.html</a></li>
</ul>
<pre><code>apt-get install sqlite3
apt-get install libsqlite3-dev
npm install sqlite3</code></pre>
<p>How to create a table:</p>
<pre><code>CREATE TABLE people(
   varchar(30) primary key,
   firstName text,
   lastName text,
   age integer
);</code></pre>
<h2 id="free-graphics">Free Graphics</h2>
<ul>
<li><a href="http://opengameart.org/">http://opengameart.org/</a></li>
<li><a href="http://www.lostgarden.com/2006/07/more-free-game-graphics.html">http://www.lostgarden.com/2006/07/more-free-game-graphics.html</a></li>
<li><a href="http://gamedev.stackexchange.com/questions/20/where-can-i-find-free-sprites-and-images">http://gamedev.stackexchange.com/questions/20/where-can-i-find-free-sprites-and-images</a></li>
<li><a href="http://www.cgtextures.com/">http://www.cgtextures.com/</a></li>
</ul>
<h2 id="collisions">Collisions</h2>
<p>Here is one way to detect a collision with an NPC. It assumes that npcs is a two dimensional array containing 0 for no NPC and any other number is an NPC.</p>
<pre><code>    var detectCollision = function(playerX, playerY) {
        var npcNumber = npcs[playerY][playerX];
        if (npcNumber !== 0) {
            $(&quot;#npc&quot;).html(&quot;Found an npc with number: &quot; + npcNumber);
        }
    }</code></pre>
<h2 id="virtualbox">VirtualBox</h2>
<p>The minimal cd, let's use the 32 bit 13.04 ringtail option.</p>
<p><a href="https://help.ubuntu.com/community/Installation/MinimalCD">https://help.ubuntu.com/community/Installation/MinimalCD</a> <a href="http://archive.ubuntu.com/ubuntu/dists/raring/main/installer-i386/current/images/netboot/mini.iso">http://archive.ubuntu.com/ubuntu/dists/raring/main/installer-i386/current/images/netboot/mini.iso</a> <a href="http://elvenware.com/charlie/os/linux/VirtualBox.html">http://elvenware.com/charlie/os/linux/VirtualBox.html</a> <a href="http://elvenware.com/charlie/os/linux/VirtualBox.html#minimal">http://elvenware.com/charlie/os/linux/VirtualBox.html#minimal</a></p>
<p>When doing the install, you can follow the steps for minimal install, linked above. Some quick reminders if you just need a few hints:</p>
<ul>
<li>At 1048 MB of Memory (2048 preferred)</li>
<li>Create virtual hard drive now</li>
<li>VDI, Dynamically allocated, 8 GB if you are short on disk space, else 16 GB.</li>
<li>Settings | Storage | Add CD</li>
<li>Network Bridged Adapter PCNet Fast III (If you are at school, see notes)</li>
</ul>
<p>During the install:</p>
<ul>
<li>Guided, use entire disk.</li>
<li>Just install Ubuntu Server and SSH Server.</li>
<li>If you create other installs, then create an Ubuntu Desktop or Lubuntu desktop.</li>
</ul>
<p>As soon as you have the puppy properly installed, then immediately make a VirtualBox appliance as a back up. Make more applianaces as needed, and name them carefully.</p>
<p>I have generally found that it is not worth the effort to try to get two copies of the same virtual appliance running at the same time. (Let me know if you find a clean way to do this.)</p>
<p>My suggestion is that you do a VBox Ubuntu install, make an appliance as a back up, and get to work. Then some Saturday afternoon when nothing much is happening, create a few more VBox Ubuntu installs. It might be nice to have four or five of them around, assuming you have the hard drive space. Name them carefully. <a href="http://www.elvenware.com/charlie/development/cloud/virtualization.html">http://www.elvenware.com/charlie/development/cloud/virtualization.html</a></p>
<h2 id="angular-js">Angular JS</h2>
<h2 id="folder-manipulation">Folder Manipulation</h2>
<p>A library with a routine for ensuring a directory exists and for recursively removing directories.</p>
<pre><code>var mkdirp = require(&#39;mkdirp&#39;);
var fs = require(&#39;fs&#39;);
var path = require(&quot;path&quot;);

var SimpleDir = (function() {

    function SimpleDir() {
    }
    
    var makeDir = function(folder) {
        mkdirp(folder);
    }
    
    // Test if a directory exists, if it does not exist create it
    SimpleDir.prototype.ensureDir = function(folder) {
        fs.exists(folder, existsFunc);
    }
    
    // Synchronous version of directory exists
    SimpleDir.prototype.ensureDirSync = function(folder) {
        currentFolder = folder;
        if (fs.existsSync(folder)) {
            return fs.statSync(folder);
        } else {
            makeDir(folder);
            return &#39;successfully created directory&#39;;
        }       
    };

    // Remove directories recursively
    // Credit to tkihira: https://gist.github.com/tkihira/2367067
    SimpleDir.prototype.rmdirSync = function(dir) {
        var list = fs.readdirSync(dir);
        for(var i = 0; i &lt; list.length; i++) {
            var filename = path.join(dir, list[i]);
            var stat = fs.statSync(filename);
            
            if(filename == &quot;.&quot; || filename == &quot;..&quot;) {
                // pass these files
            } else if(stat.isDirectory()) {
                // rmdir recursively
                this.rmdirSync(filename);
            } else {
                // rm filename
                fs.unlinkSync(filename);
            }
        }
        fs.rmdirSync(dir);
    };
        
    return SimpleDir;
})();

exports.dirs = new SimpleDir();</code></pre>
<h2 id="angular-js-1">Angular JS</h2>
<p><a href="http://stephanebegaudeau.tumblr.com/post/48776908163/everything-you-need-to-understand-to-start-with">http://stephanebegaudeau.tumblr.com/post/48776908163/everything-you-need-to-understand-to-start-with</a> <a href="http://webdesign.tutsplus.com/tutorials/htmlcss-tutorials/all-you-need-to-know-about-the-html5-data-attribute/">http://webdesign.tutsplus.com/tutorials/htmlcss-tutorials/all-you-need-to-know-about-the-html5-data-attribute/</a></p>
