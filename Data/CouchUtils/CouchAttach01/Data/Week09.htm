<h1 id="week09-overview">Week09 Overview</h1>
<p>Our major topic:</p>
<ul>
<li><a href="http://www.elvenware.com/charlie/development/web/JavaScript/NodeJs.html#express-generated-applications">Express Generated Apps on Elvenware</a></li>
<li><a href="http://jade-lang.com/">Jade</a></li>
<li><a href="http://learnboost.github.io/stylus/">Stylus</a></li>
<li><a href="http://www.elvenware.com/charlie/development/database/NoSql/CouchDb.html">CouchDb on Elvenware</a></li>
<li><a href="http://phantomjs.org/">PhantomJs site. Also see below.</a></li>
</ul>
<p>The assignments:</p>
<ul>
<li><a href="http://www.elvenware.com/charlie/books/CloudNotes/Prog282/Week09-InClass.html">Week09-InClass</a></li>
<li><a href="http://www.elvenware.com/charlie/books/CloudNotes/Prog282/Week09-Assignment.html">Week09-Assignment</a></li>
</ul>
<h2 id="phantomjs-and-qunit">PhantomJs and QUnit</h2>
<p>You can use PhantomJs to run tests on your program from the command line. This means that we can run QUnit tests from the command line:</p>
<pre><code>G:\Src&gt;phantomjs Tests\run-qunit.js http://localhost:30025/TestCanvasCode.html
&#39;waitFor()&#39; finished in 233ms.
Tests completed in 141 milliseconds.
44 assertions of 58 passed, 14 failed.</code></pre>
<p>Here is the home page for PhantomJs and a related tool called CasperJs:</p>
<ul>
<li><a href="http://phantomjs.org/">http://phantomjs.org/</a></li>
<li><a href="http://casperjs.org/">http://casperjs.org/</a></li>
</ul>
<p>References:</p>
<ul>
<li><a href="https://gist.github.com/gmarik/1305062">https://gist.github.com/gmarik/1305062</a></li>
</ul>
<h2 id="create-database">Create Database</h2>
<p>Check if a database exists, if it does not, create it:</p>
<pre><code>    var makeDatabase = function(response, dbName) {
        nano.db.create(dbName, function(err, body) {
            if (!err) {
                console.log(body);
                // return { &quot;Result&quot; : &quot;Success&quot; };
            } else {
                console.log(&#39;Could not create database&#39;);
                console.log(err);
                response.send(500, err);
            }
        });
    };

    var dbExists = function(response, dbName) {
        nano.db.list(function(err, body) {
            var dbFound = false;
            // body is an array
            body.forEach(function(db) {
                console.log(db);
                if (db === dbName) {
                    console.log(&#39;database exists&#39;);
                    dbFound = true;
                }
            });
            
            // If dbName not found, create database         
            if (!dbFound) {
                makeDatabase(response, dbName);
            } else {
                response.send({&#39;Result&#39;:&#39;Database Exists&#39;})
            }
        });
    };</code></pre>
<p>Call it like this:</p>
<pre><code>dbExists(response, dbName);</code></pre>
<h2 id="express-complete-build">Express Complete Build</h2>
<p>Some links for express and a note or two.</p>
<ul>
<li><a href="http://www.elvenware.com/charlie/development/web/JavaScript/NodeJs.html#express-generated-applications">Express Generated Apps on Elvenware</a></li>
<li><a href="http://blog.jtmoon.com/real-time-application-multi-user-chat-application-using-node-js-socket-io-and-ember-js/">Multi-user Chat</a></li>
<li><a href="http://tech.pro/tutorial/1097/simple-chat-nodejs-plus-websockets">Simple Chat</a></li>
</ul>
<p>Express application is here:</p>
<pre><code>C:\Users\Charlie\AppData\Roaming\npm\node_modules\.bin</code></pre>
<p>Of sometimes just in your ../node_modules/express/.bin directory</p>
<h2 id="nodemon-watches-for-changes">Nodemon Watches for Changes</h2>
<p>Install nodemon:</p>
<pre><code>npm install -g nodemon</code></pre>
<p>Now use it to start your application:</p>
<pre><code>nodemon server.js</code></pre>
<p>Now you won't have to restart your application each time you change the source.</p>
<h2 id="initializing-buttons-on-dynamically-inserted-html">Initializing Buttons on Dynamically Inserted HTML</h2>
<p>If you load a HTML page in your game, then you sometimes need to initialize the buttons that you will use on that page. One way to do that is to link in a JavaScript page from the loaded HTML page, and load the buttons there. However, sometimes that is not practical. In that case, do something like this:</p>
<pre><code>    var htmlView = function() {
        $(&#39;#main&#39;).empty();
        $(&#39;#main&#39;).load(&quot;/Data/newSections.html #barFoo&quot;,
            function() {
                // Init the button here
                $(&quot;#buttonCreateArray&quot;).click(allGridFilesToArray);
                // Alternatively, call some method where you init the buttons
                that.elvenData.setUpCouchDbUtils();
            }
        );
    }</code></pre>
